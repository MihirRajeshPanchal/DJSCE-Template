# -*- coding: utf-8 -*-
"""Columnar.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QNa3oEtMn_w9kOMc0eDNs2JcIKrnlCYl
"""

from math import ceil
import cv2
from google.colab.patches import cv2_imshow
import numpy as np

plaintext = list('meetmeattheboatclubcanteen')
key = 'monarchy'

def encryption(message, key):
  ciphertext = []
  # message_list = list(message)
  message_length = len(message)
  sorted_key = sorted(list(key))
  column = len(key)
  row = int(ceil(message_length/column))
  dummy_characters = (row*column) - message_length
  message.extend('*'*dummy_characters)
  matrix = list()
  counter = 0
  for i in range(row):
    temp = list()
    for j in range(column):
      temp.append(message[counter])
      counter += 1
    matrix.append(temp)
  counter = 0
  for j in range(column):
    index = key.index(sorted_key[counter])
    # ciphertext += ''.join([row[index] for row in matrix])
    for row in matrix:
      ciphertext.append(row[index])
    counter += 1
  return ciphertext
ciphertext = encryption(plaintext,key)
print('For given plaintext : ' + ''.join(plaintext) + ' the corresponding ciphertext is :' + ''.join(ciphertext))

def decryption(ciphertext, key):
  plaintext = []
  message_length = len(ciphertext)
  # message = list(ciphertext)
  sorted_key = sorted(list(key))
  column = len(key)
  row = int(message_length/column)
  counter = 0
  matrix = list()
  for j in range(row):
    matrix.append(['']*column)
  for j in range(column):
    index = key.index(sorted_key[j])
    for i in range(row):
      matrix[i][index] = ciphertext[counter]
      counter+=1
  for i in range(row):
    for j in range(column):
      if matrix[i][j] != '*':
        plaintext.append(matrix[i][j])
  return plaintext
plaintext = decryption(ciphertext,key)
print('For given ciphertext : ' + ''.join(ciphertext) + ' the corresponding plaintext is :' + ''.join(plaintext))

key = "authorized"
image = cv2.imread("batman.jpg",0)
image = np.array(image,dtype=np.int64)
cv2_imshow(image)

shape = image.shape
flat_image = list(image.flatten())

encrypted = encryption(flat_image,key)
encrypted = np.array(encrypted,dtype=np.int64)
encrypted = encrypted.reshape(shape)
cv2_imshow(encrypted)

encrypted_flat_image = list(encrypted.flatten())

decrypted = decryption(encrypted_flat_image,key)
decrypted = np.array(decrypted,dtype=np.int64)
decrypted = decrypted.reshape(shape)
cv2_imshow(decrypted)

"""# New Section"""

